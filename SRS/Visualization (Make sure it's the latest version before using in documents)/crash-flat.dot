digraph "reqT.Model" { 

  compound=true;overlap=false;rankdir=LR;clusterrank=local;
  node [fontname="Sans", fontsize=9];
  edge [fontname="Sans", fontsize=9];

"Title(CRASH)" [label="Title\nCRASH", shape=box, style=rounded];
"Section(FunctionalRequirements)" [label="Section\nFunctionalRequirements", shape=box];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Section(FunctionalRequirements)" -> "Section(FunctionalGoalRequirements)" [label=has];
"Section(FunctionalRequirements)" [label="Section\nFunctionalRequirements", shape=box];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Section(FunctionalRequirements)" -> "Section(FunctionalDomainRequirements)" [label=has];
"Section(FunctionalRequirements)" [label="Section\nFunctionalRequirements", shape=box];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Section(FunctionalRequirements)" -> "Section(FunctionalProductRequirements)" [label=has];
"Section(FunctionalRequirements)" [label="Section\nFunctionalRequirements", shape=box];
"Section(FunctionalScenarioRequirements)" [label="Section\nFunctionalScenarioRequirements", shape=box];
"Section(FunctionalRequirements)" -> "Section(FunctionalScenarioRequirements)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo1)" [label="Goal\nFGo1", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo1)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo2)" [label="Goal\nFGo2", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo2)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo3)" [label="Goal\nFGo3", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo3)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo4)" [label="Goal\nFGo4", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo4)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo5)" [label="Goal\nFGo5", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo5)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo6)" [label="Goal\nFGo6", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo6)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo7)" [label="Goal\nFGo7", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo7)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo8)" [label="Goal\nFGo8", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo8)" [label=has];
"Section(FunctionalGoalRequirements)" [label="Section\nFunctionalGoalRequirements", shape=box];
"Goal(FGo9)" [label="Goal\nFGo9", shape=box];
"Section(FunctionalGoalRequirements)" -> "Goal(FGo9)" [label=has];
"Goal(FGo1)" [label="Goal\nFGo1", shape=box];
"Spec(Autonomous car)" [label="Spec\nAutonomous car", shape=box, style=rounded];
"Goal(FGo1)" -> "Spec(Autonomous car)" [label=has];
"Goal(FGo2)" [label="Goal\nFGo2", shape=box];
"Spec(Reduce amount of traffic accidents on Swedish roads)" [label="Spec\nReduce amount of traffic accidents on Swedish roads", shape=box, style=rounded];
"Goal(FGo2)" -> "Spec(Reduce amount of traffic accidents on Swedish roads)" [label=has];
"Goal(FGo3)" [label="Goal\nFGo3", shape=box];
"Spec(Maintain industry market shares)" [label="Spec\nMaintain industry market shares", shape=box, style=rounded];
"Goal(FGo3)" -> "Spec(Maintain industry market shares)" [label=has];
"Goal(FGo4)" [label="Goal\nFGo4", shape=box];
"Spec(Achieve maximal usability)" [label="Spec\nAchieve maximal usability", shape=box, style=rounded];
"Goal(FGo4)" -> "Spec(Achieve maximal usability)" [label=has];
"Goal(FGo5)" [label="Goal\nFGo5", shape=box];
"Spec(Avoid human deaths in traffic)" [label="Spec\nAvoid human deaths in traffic", shape=box, style=rounded];
"Goal(FGo5)" -> "Spec(Avoid human deaths in traffic)" [label=has];
"Goal(FGo6)" [label="Goal\nFGo6", shape=box];
"Spec(Achieve maximal security)" [label="Spec\nAchieve maximal security", shape=box, style=rounded];
"Goal(FGo6)" -> "Spec(Achieve maximal security)" [label=has];
"Goal(FGo7)" [label="Goal\nFGo7", shape=box];
"Spec(Expand to other markets than private use)" [label="Spec\nExpand to other markets than private use", shape=box, style=rounded];
"Goal(FGo7)" -> "Spec(Expand to other markets than private use)" [label=has];
"Goal(FGo8)" [label="Goal\nFGo8", shape=box];
"Spec(Achieve maximum comfort)" [label="Spec\nAchieve maximum comfort", shape=box, style=rounded];
"Goal(FGo8)" -> "Spec(Achieve maximum comfort)" [label=has];
"Goal(FGo9)" [label="Goal\nFGo9", shape=box];
"Spec(Reduce cars' negative impacts on the environment)" [label="Spec\nReduce cars' negative impacts on the environment", shape=box, style=rounded];
"Goal(FGo9)" -> "Spec(Reduce cars' negative impacts on the environment)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo1)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo2)" [label="Domain\nFDo2", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo2)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo3)" [label="Domain\nFDo3", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo3)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo4)" [label="Domain\nFDo4", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo4)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo5)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo6)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo7)" [label="Domain\nFDo7", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo7)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo8)" [label="Domain\nFDo8", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo8)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo9)" [label="Domain\nFDo9", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo9)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo10)" [label="Domain\nFDo10", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo10)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo11)" [label="Domain\nFDo11", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo11)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo12)" [label="Domain\nFDo12", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo12)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo13)" [label="Domain\nFDo13", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo13)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo14)" [label="Domain\nFDo14", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo14)" [label=has];
"Section(FunctionalDomainRequirements)" [label="Section\nFunctionalDomainRequirements", shape=box];
"Domain(FDo15)" [label="Domain\nFDo15", shape=box];
"Section(FunctionalDomainRequirements)" -> "Domain(FDo15)" [label=has];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Spec(The system must adhere to Swedish traffic laws as long as an accident is not imminent)" [label="Spec\nThe system must adhere to Swedish traffic laws as long as an accident is not imminent", shape=box, style=rounded];
"Domain(FDo1)" -> "Spec(The system must adhere to Swedish traffic laws as long as an accident is not imminent)" [label=has];
"Domain(FDo2)" [label="Domain\nFDo2", shape=box];
"Spec(If an accident can be avoided, the system may break traffic laws)" [label="Spec\nIf an accident can be avoided, the system may break traffic laws", shape=box, style=rounded];
"Domain(FDo2)" -> "Spec(If an accident can be avoided, the system may break traffic laws)" [label=has];
"Domain(FDo3)" [label="Domain\nFDo3", shape=box];
"Spec(When the car is in an unsafe state the car must not be able/allowed to drive)" [label="Spec\nWhen the car is in an unsafe state the car must not be able/allowed to drive", shape=box, style=rounded];
"Domain(FDo3)" -> "Spec(When the car is in an unsafe state the car must not be able/allowed to drive)" [label=has];
"Domain(FDo4)" [label="Domain\nFDo4", shape=box];
"Domain(FDo4a)" [label="Domain\nFDo4a", shape=box];
"Domain(FDo4)" -> "Domain(FDo4a)" [label=has];
"Domain(FDo4)" [label="Domain\nFDo4", shape=box];
"Domain(FDo4b)" [label="Domain\nFDo4b", shape=box];
"Domain(FDo4)" -> "Domain(FDo4b)" [label=has];
"Domain(FDo4a)" [label="Domain\nFDo4a", shape=box];
"Spec(In the situation of an accident, the system must prioritize risks in the following order: Saving as many human lives as possible has top priority)" [label="Spec\nIn the situation of an accident, the system must prioritize risks in the following order: Saving as many human lives as possible has top priority", shape=box, style=rounded];
"Domain(FDo4a)" -> "Spec(In the situation of an accident, the system must prioritize risks in the following order: Saving as many human lives as possible has top priority)" [label=has];
"Domain(FDo4b)" [label="Domain\nFDo4b", shape=box];
"Spec(In the situation of an accident, the system must prioritize risks in the following order: Protecting humans inside the car is prioritized over humans outside the car)" [label="Spec\nIn the situation of an accident, the system must prioritize risks in the following order: Protecting humans inside the car is prioritized over humans outside the car", shape=box, style=rounded];
"Domain(FDo4b)" -> "Spec(In the situation of an accident, the system must prioritize risks in the following order: Protecting humans inside the car is prioritized over humans outside the car)" [label=has];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Spec(The system requires adequate sensors for monitoring the road and surroundings)" [label="Spec\nThe system requires adequate sensors for monitoring the road and surroundings", shape=box, style=rounded];
"Domain(FDo5)" -> "Spec(The system requires adequate sensors for monitoring the road and surroundings)" [label=has];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Spec(The system requires an Internet connection)" [label="Spec\nThe system requires an Internet connection", shape=box, style=rounded];
"Domain(FDo6)" -> "Spec(The system requires an Internet connection)" [label=has];
"Domain(FDo7)" [label="Domain\nFDo7", shape=box];
"Spec(The system requires a GPS-sensor)" [label="Spec\nThe system requires a GPS-sensor", shape=box, style=rounded];
"Domain(FDo7)" -> "Spec(The system requires a GPS-sensor)" [label=has];
"Domain(FDo8)" [label="Domain\nFDo8", shape=box];
"Spec(The system requires a breathalyzer)" [label="Spec\nThe system requires a breathalyzer", shape=box, style=rounded];
"Domain(FDo8)" -> "Spec(The system requires a breathalyzer)" [label=has];
"Domain(FDo9)" [label="Domain\nFDo9", shape=box];
"Spec(The system requires a fingerprint-sensor)" [label="Spec\nThe system requires a fingerprint-sensor", shape=box, style=rounded];
"Domain(FDo9)" -> "Spec(The system requires a fingerprint-sensor)" [label=has];
"Domain(FDo10)" [label="Domain\nFDo10", shape=box];
"Spec(The system requires a microphone)" [label="Spec\nThe system requires a microphone", shape=box, style=rounded];
"Domain(FDo10)" -> "Spec(The system requires a microphone)" [label=has];
"Domain(FDo11)" [label="Domain\nFDo11", shape=box];
"Spec(The system functions without a GPS-signal once a route has been chosen)" [label="Spec\nThe system functions without a GPS-signal once a route has been chosen", shape=box, style=rounded];
"Domain(FDo11)" -> "Spec(The system functions without a GPS-signal once a route has been chosen)" [label=has];
"Domain(FDo12)" [label="Domain\nFDo12", shape=box];
"Spec(The system needs a GPS-signal at startup)" [label="Spec\nThe system needs a GPS-signal at startup", shape=box, style=rounded];
"Domain(FDo12)" -> "Spec(The system needs a GPS-signal at startup)" [label=has];
"Domain(FDo13)" [label="Domain\nFDo13", shape=box];
"Spec(The system must strive to ecodrive when possible)" [label="Spec\nThe system must strive to ecodrive when possible", shape=box, style=rounded];
"Domain(FDo13)" -> "Spec(The system must strive to ecodrive when possible)" [label=has];
"Domain(FDo14)" [label="Domain\nFDo14", shape=box];
"Spec(All user interaction that is available in the system must be possible to enter remotely)" [label="Spec\nAll user interaction that is available in the system must be possible to enter remotely", shape=box, style=rounded];
"Domain(FDo14)" -> "Spec(All user interaction that is available in the system must be possible to enter remotely)" [label=has];
"Domain(FDo15)" [label="Domain\nFDo15", shape=box];
"Domain(FDo15a)" [label="Domain\nFDo15a", shape=box];
"Domain(FDo15)" -> "Domain(FDo15a)" [label=has];
"Domain(FDo15)" [label="Domain\nFDo15", shape=box];
"Domain(FDo15b)" [label="Domain\nFDo15b", shape=box];
"Domain(FDo15)" -> "Domain(FDo15b)" [label=has];
"Domain(FDo15a)" [label="Domain\nFDo15a", shape=box];
"Spec(The system must support: permanent user rights)" [label="Spec\nThe system must support: permanent user rights", shape=box, style=rounded];
"Domain(FDo15a)" -> "Spec(The system must support: permanent user rights)" [label=has];
"Domain(FDo15b)" [label="Domain\nFDo15b", shape=box];
"Spec(The system must support: temporary user rights)" [label="Spec\nThe system must support: temporary user rights", shape=box, style=rounded];
"Domain(FDo15b)" -> "Spec(The system must support: temporary user rights)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr1)" [label="Product\nFPr1", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr1)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr2)" [label="Product\nFPr2", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr2)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr3)" [label="Product\nFPr3", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr3)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr4)" [label="Product\nFPr4", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr4)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr5)" [label="Product\nFPr5", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr5)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr6)" [label="Product\nFPr6", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr6)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr7)" [label="Product\nFPr7", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr7)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr8)" [label="Product\nFPr8", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr8)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr9)" [label="Product\nFPr9", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr9)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr10)" [label="Product\nFPr10", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr10)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr11)" [label=has];
"Section(FunctionalProductRequirements)" [label="Section\nFunctionalProductRequirements", shape=box];
"Product(FPr12)" [label="Product\nFPr12", shape=box];
"Section(FunctionalProductRequirements)" -> "Product(FPr12)" [label=has];
"Product(FPr1)" [label="Product\nFPr1", shape=box];
"Spec(The system has to to retrieve current and future weather data using from the Internet when a connection is available)" [label="Spec\nThe system has to to retrieve current and future weather data using from the Internet when a connection is available", shape=box, style=rounded];
"Product(FPr1)" -> "Spec(The system has to to retrieve current and future weather data using from the Internet when a connection is available)" [label=has];
"Product(FPr2)" [label="Product\nFPr2", shape=box];
"Spec(The system must give a warning when dangerous weather conditions are predicted along the planned route)" [label="Spec\nThe system must give a warning when dangerous weather conditions are predicted along the planned route", shape=box, style=rounded];
"Product(FPr2)" -> "Spec(The system must give a warning when dangerous weather conditions are predicted along the planned route)" [label=has];
"Product(FPr3)" [label="Product\nFPr3", shape=box];
"Spec(The system has to retrieve data of current and future traffic situations when an Internet connection is available)" [label="Spec\nThe system has to retrieve data of current and future traffic situations when an Internet connection is available", shape=box, style=rounded];
"Product(FPr3)" -> "Spec(The system has to retrieve data of current and future traffic situations when an Internet connection is available)" [label=has];
"Product(FPr4)" [label="Product\nFPr4", shape=box];
"Spec(The system must always be possible to stop via an emergency-break)" [label="Spec\nThe system must always be possible to stop via an emergency-break", shape=box, style=rounded];
"Product(FPr4)" -> "Spec(The system must always be possible to stop via an emergency-break)" [label=has];
"Product(FPr5)" [label="Product\nFPr5", shape=box];
"Spec(It must always be possible to request to turn off the autonomous system and drive the car manually)" [label="Spec\nIt must always be possible to request to turn off the autonomous system and drive the car manually", shape=box, style=rounded];
"Product(FPr5)" -> "Spec(It must always be possible to request to turn off the autonomous system and drive the car manually)" [label=has];
"Product(FPr6)" [label="Product\nFPr6", shape=box];
"Spec(When manual driving has been requested, the car has to be standing still before the autonomous system is turned off)" [label="Spec\nWhen manual driving has been requested, the car has to be standing still before the autonomous system is turned off", shape=box, style=rounded];
"Product(FPr6)" -> "Spec(When manual driving has been requested, the car has to be standing still before the autonomous system is turned off)" [label=has];
"Product(FPr7)" [label="Product\nFPr7", shape=box];
"Spec(For a passenger to be able to turn off the system and drive the car manually, the person has to blow under the legal limit in the breathalyzer)" [label="Spec\nFor a passenger to be able to turn off the system and drive the car manually, the person has to blow under the legal limit in the breathalyzer", shape=box, style=rounded];
"Product(FPr7)" -> "Spec(For a passenger to be able to turn off the system and drive the car manually, the person has to blow under the legal limit in the breathalyzer)" [label=has];
"Product(FPr8)" [label="Product\nFPr8", shape=box];
"Spec(The breathalyzer has to be configured according to Swedish traffic law)" [label="Spec\nThe breathalyzer has to be configured according to Swedish traffic law", shape=box, style=rounded];
"Product(FPr8)" -> "Spec(The breathalyzer has to be configured according to Swedish traffic law)" [label=has];
"Product(FPr9)" [label="Product\nFPr9", shape=box];
"Spec(The system has to support voice controlled input)" [label="Spec\nThe system has to support voice controlled input", shape=box, style=rounded];
"Product(FPr9)" -> "Spec(The system has to support voice controlled input)" [label=has];
"Product(FPr10)" [label="Product\nFPr10", shape=box];
"Spec(The system has to support input from the car's dashboard)" [label="Spec\nThe system has to support input from the car's dashboard", shape=box, style=rounded];
"Product(FPr10)" -> "Spec(The system has to support input from the car's dashboard)" [label=has];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Spec(The system has to be able to evaluate the car's status compared to current Swedish car inspection rules before driving off)" [label="Spec\nThe system has to be able to evaluate the car's status compared to current Swedish car inspection rules before driving off", shape=box, style=rounded];
"Product(FPr11)" -> "Spec(The system has to be able to evaluate the car's status compared to current Swedish car inspection rules before driving off)" [label=has];
"Product(FPr12)" [label="Product\nFPr12", shape=box];
"Spec(The system has to order a towing service when it is in an unsafe state)" [label="Spec\nThe system has to order a towing service when it is in an unsafe state", shape=box, style=rounded];
"Product(FPr12)" -> "Spec(The system has to order a towing service when it is in an unsafe state)" [label=has];
"Section(FunctionalScenarioRequirements)" [label="Section\nFunctionalScenarioRequirements", shape=box];
"Scenario(FSc1)" [label="Scenario\nFSc1", shape=box];
"Section(FunctionalScenarioRequirements)" -> "Scenario(FSc1)" [label=has];
"Section(FunctionalScenarioRequirements)" [label="Section\nFunctionalScenarioRequirements", shape=box];
"Scenario(FSc2)" [label="Scenario\nFSc2", shape=box];
"Section(FunctionalScenarioRequirements)" -> "Scenario(FSc2)" [label=has];
"Scenario(FSc1)" [label="Scenario\nFSc1", shape=box];
"Spec(Niklas Sjöberg’s football practice is over and he remotely tells his car to pick him and his friends up at the football pitch, he uses his phone and the CRASH-application. The next step is that the car drives to pick up Niklas and his friends. When the car arrives, Niklas authenticates himself by fingerprint with the cars fingerprint scanner located on the car key. When the authentication is done, Niklas and his friends enter the car and Niklas tells the car where to drive using voice control, when this is done, the car drives the passengers to the given addresses. One of Niklas’ friends lives further away than Niklas himself and he is tired and he wants to be dropped off first. Since Niklas was the official “Driver” and now leaves the car, the passenger left in the car has to authenticate himself and thus becomes a authenticated passenger, using the fingerprint scanner.)" [label="Spec\nNiklas Sjöberg’s football practice is over and he remotely tells his car to pick him and his friends up at the football pitch, he uses his phone and the CRASH-application. The next step is that the car drives to pick up Niklas and his friends. When the car arrives, Niklas authenticates himself by fingerprint with the cars fingerprint scanner located on the car key. When the authentication is done, Niklas and his friends enter the car and Niklas tells the car where to drive using voice control, when this is done, the car drives the passengers to the given addresses. One of Niklas’ friends lives further away than Niklas himself and he is tired and he wants to be dropped off first. Since Niklas was the official “Driver” and now leaves the car, the passenger left in the car has to authenticate himself and thus becomes a authenticated passenger, using the fingerprint scanner.", shape=box, style=rounded];
"Scenario(FSc1)" -> "Spec(Niklas Sjöberg’s football practice is over and he remotely tells his car to pick him and his friends up at the football pitch, he uses his phone and the CRASH-application. The next step is that the car drives to pick up Niklas and his friends. When the car arrives, Niklas authenticates himself by fingerprint with the cars fingerprint scanner located on the car key. When the authentication is done, Niklas and his friends enter the car and Niklas tells the car where to drive using voice control, when this is done, the car drives the passengers to the given addresses. One of Niklas’ friends lives further away than Niklas himself and he is tired and he wants to be dropped off first. Since Niklas was the official “Driver” and now leaves the car, the passenger left in the car has to authenticate himself and thus becomes a authenticated passenger, using the fingerprint scanner.)" [label=has];
"Scenario(FSc2)" [label="Scenario\nFSc2", shape=box];
"Spec(Jonathan Klingberg is at work and something very important has just come up, which means that he cannot pick up his daughter at school as planned. Instead he uses his phone to remotely tell his car to pick up his child. The child receives a notification on her phone from the car that it is on its way for a pick up and how long it should take to arrive. When the car arrives, Jonathan’s daughter authenticates herself with the cars built-in fingerprint scanner and enters the car. The car drives the child home with the fathers predetermined route input.)" [label="Spec\nJonathan Klingberg is at work and something very important has just come up, which means that he cannot pick up his daughter at school as planned. Instead he uses his phone to remotely tell his car to pick up his child. The child receives a notification on her phone from the car that it is on its way for a pick up and how long it should take to arrive. When the car arrives, Jonathan’s daughter authenticates herself with the cars built-in fingerprint scanner and enters the car. The car drives the child home with the fathers predetermined route input.", shape=box, style=rounded];
"Scenario(FSc2)" -> "Spec(Jonathan Klingberg is at work and something very important has just come up, which means that he cannot pick up his daughter at school as planned. Instead he uses his phone to remotely tell his car to pick up his child. The child receives a notification on her phone from the car that it is on its way for a pick up and how long it should take to arrive. When the car arrives, Jonathan’s daughter authenticates herself with the cars built-in fingerprint scanner and enters the car. The car drives the child home with the fathers predetermined route input.)" [label=has];
"Section(DataRequirements)" [label="Section\nDataRequirements", shape=box];
"Section(DataDomainRequirements)" [label="Section\nDataDomainRequirements", shape=box];
"Section(DataRequirements)" -> "Section(DataDomainRequirements)" [label=has];
"Section(DataRequirements)" [label="Section\nDataRequirements", shape=box];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Section(DataRequirements)" -> "Section(DataProductRequirements)" [label=has];
"Section(DataDomainRequirements)" [label="Section\nDataDomainRequirements", shape=box];
"Domain(DDo1)" [label="Domain\nDDo1", shape=box];
"Section(DataDomainRequirements)" -> "Domain(DDo1)" [label=has];
"Section(DataDomainRequirements)" [label="Section\nDataDomainRequirements", shape=box];
"Domain(DDo2)" [label="Domain\nDDo2", shape=box];
"Section(DataDomainRequirements)" -> "Domain(DDo2)" [label=has];
"Section(DataDomainRequirements)" [label="Section\nDataDomainRequirements", shape=box];
"Domain(DDo3)" [label="Domain\nDDo3", shape=box];
"Section(DataDomainRequirements)" -> "Domain(DDo3)" [label=has];
"Section(DataDomainRequirements)" [label="Section\nDataDomainRequirements", shape=box];
"Domain(DDo4)" [label="Domain\nDDo4", shape=box];
"Section(DataDomainRequirements)" -> "Domain(DDo4)" [label=has];
"Domain(DDo1)" [label="Domain\nDDo1", shape=box];
"Domain(DDo1a)" [label="Domain\nDDo1a", shape=box];
"Domain(DDo1)" -> "Domain(DDo1a)" [label=has];
"Domain(DDo1)" [label="Domain\nDDo1", shape=box];
"Domain(DDo1b)" [label="Domain\nDDo1b", shape=box];
"Domain(DDo1)" -> "Domain(DDo1b)" [label=has];
"Domain(DDo1)" [label="Domain\nDDo1", shape=box];
"Domain(DDo1c)" [label="Domain\nDDo1c", shape=box];
"Domain(DDo1)" -> "Domain(DDo1c)" [label=has];
"Domain(DDo1)" [label="Domain\nDDo1", shape=box];
"Domain(DDo1d)" [label="Domain\nDDo1d", shape=box];
"Domain(DDo1)" -> "Domain(DDo1d)" [label=has];
"Domain(DDo1a)" [label="Domain\nDDo1a", shape=box];
"Spec(The system must support the following authorized user types: Passenger)" [label="Spec\nThe system must support the following authorized user types: Passenger", shape=box, style=rounded];
"Domain(DDo1a)" -> "Spec(The system must support the following authorized user types: Passenger)" [label=has];
"Domain(DDo1b)" [label="Domain\nDDo1b", shape=box];
"Spec(The system must support the following authorized user types: Driver)" [label="Spec\nThe system must support the following authorized user types: Driver", shape=box, style=rounded];
"Domain(DDo1b)" -> "Spec(The system must support the following authorized user types: Driver)" [label=has];
"Domain(DDo1c)" [label="Domain\nDDo1c", shape=box];
"Spec(The system must support the following authorized user types: Owner)" [label="Spec\nThe system must support the following authorized user types: Owner", shape=box, style=rounded];
"Domain(DDo1c)" -> "Spec(The system must support the following authorized user types: Owner)" [label=has];
"Domain(DDo1d)" [label="Domain\nDDo1d", shape=box];
"Spec(The system must support the following authorized user types: Admin)" [label="Spec\nThe system must support the following authorized user types: Admin", shape=box, style=rounded];
"Domain(DDo1d)" -> "Spec(The system must support the following authorized user types: Admin)" [label=has];
"Domain(DDo2)" [label="Domain\nDDo2", shape=box];
"Spec(A driver must be able to choose & change destination)" [label="Spec\nA driver must be able to choose & change destination", shape=box, style=rounded];
"Domain(DDo2)" -> "Spec(A driver must be able to choose & change destination)" [label=has];
"Domain(DDo3)" [label="Domain\nDDo3", shape=box];
"Text(An owner has the same rights as a driver and must also be able to handle users)" [label="Text\nAn owner has the same rights as a driver and must also be able to handle users", shape=box, style=rounded];
"Domain(DDo3)" -> "Text(An owner has the same rights as a driver and must also be able to handle users)" [label=has];
"Domain(DDo4)" [label="Domain\nDDo4", shape=box];
"Spec(An admin must have the same rights as an owner and the admin must be able to change system settings)" [label="Spec\nAn admin must have the same rights as an owner and the admin must be able to change system settings", shape=box, style=rounded];
"Domain(DDo4)" -> "Spec(An admin must have the same rights as an owner and the admin must be able to change system settings)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr1)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr2)" [label="Product\nDPr2", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr2)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr3)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr4)" [label="Product\nDPr4", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr4)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr5)" [label="Product\nDPr5", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr5)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr6)" [label="Product\nDPr6", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr6)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr7)" [label="Product\nDPr7", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr7)" [label=has];
"Section(DataProductRequirements)" [label="Section\nDataProductRequirements", shape=box];
"Product(DPr8)" [label="Product\nDPr8", shape=box];
"Section(DataProductRequirements)" -> "Product(DPr8)" [label=has];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Spec(The system must store Swedish traffic rules)" [label="Spec\nThe system must store Swedish traffic rules", shape=box, style=rounded];
"Product(DPr1)" -> "Spec(The system must store Swedish traffic rules)" [label=has];
"Product(DPr2)" [label="Product\nDPr2", shape=box];
"Product(DPr2a)" [label="Product\nDPr2a", shape=box];
"Product(DPr2)" -> "Product(DPr2a)" [label=has];
"Product(DPr2)" [label="Product\nDPr2", shape=box];
"Product(DPr2b)" [label="Product\nDPr2b", shape=box];
"Product(DPr2)" -> "Product(DPr2b)" [label=has];
"Product(DPr2)" [label="Product\nDPr2", shape=box];
"Product(DPr2c)" [label="Product\nDPr2c", shape=box];
"Product(DPr2)" -> "Product(DPr2c)" [label=has];
"Product(DPr2a)" [label="Product\nDPr2a", shape=box];
"Spec(The system must store the following user data: Name)" [label="Spec\nThe system must store the following user data: Name", shape=box, style=rounded];
"Product(DPr2a)" -> "Spec(The system must store the following user data: Name)" [label=has];
"Product(DPr2b)" [label="Product\nDPr2b", shape=box];
"Spec(The system must store the following user data: User type)" [label="Spec\nThe system must store the following user data: User type", shape=box, style=rounded];
"Product(DPr2b)" -> "Spec(The system must store the following user data: User type)" [label=has];
"Product(DPr2c)" [label="Product\nDPr2c", shape=box];
"Spec(The system must store the following user data: Fingerprint)" [label="Spec\nThe system must store the following user data: Fingerprint", shape=box, style=rounded];
"Product(DPr2c)" -> "Spec(The system must store the following user data: Fingerprint)" [label=has];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Spec(The system must store route data)" [label="Spec\nThe system must store route data", shape=box, style=rounded];
"Product(DPr3)" -> "Spec(The system must store route data)" [label=has];
"Product(DPr4)" [label="Product\nDPr4", shape=box];
"Spec(The system must store a service log)" [label="Spec\nThe system must store a service log", shape=box, style=rounded];
"Product(DPr4)" -> "Spec(The system must store a service log)" [label=has];
"Product(DPr5)" [label="Product\nDPr5", shape=box];
"Spec(The system must be able to store future traffic laws)" [label="Spec\nThe system must be able to store future traffic laws", shape=box, style=rounded];
"Product(DPr5)" -> "Spec(The system must be able to store future traffic laws)" [label=has];
"Product(DPr6)" [label="Product\nDPr6", shape=box];
"Spec(The system must store Swedish car inspections rules and regulations)" [label="Spec\nThe system must store Swedish car inspections rules and regulations", shape=box, style=rounded];
"Product(DPr6)" -> "Spec(The system must store Swedish car inspections rules and regulations)" [label=has];
"Product(DPr7)" [label="Product\nDPr7", shape=box];
"Spec(If there are users in the car, at least one needs to be authenticated)" [label="Spec\nIf there are users in the car, at least one needs to be authenticated", shape=box, style=rounded];
"Product(DPr7)" -> "Spec(If there are users in the car, at least one needs to be authenticated)" [label=has];
"Product(DPr8)" [label="Product\nDPr8", shape=box];
"Text(The service log should contain the following data: date, service type, serviceprovider, Mileage, Description)" [label="Text\nThe service log should contain the following data: date, service type, serviceprovider, Mileage, Description", shape=box, style=rounded];
"Product(DPr8)" -> "Text(The service log should contain the following data: date, service type, serviceprovider, Mileage, Description)" [label=has];
"Section(QualityRequirements)" [label="Section\nQualityRequirements", shape=box];
"Section(QualityGoalRequirements)" [label="Section\nQualityGoalRequirements", shape=box];
"Section(QualityRequirements)" -> "Section(QualityGoalRequirements)" [label=has];
"Section(QualityRequirements)" [label="Section\nQualityRequirements", shape=box];
"Section(QualityDomainRequirements)" [label="Section\nQualityDomainRequirements", shape=box];
"Section(QualityRequirements)" -> "Section(QualityDomainRequirements)" [label=has];
"Section(QualityRequirements)" [label="Section\nQualityRequirements", shape=box];
"Section(QualityProductRequirements)" [label="Section\nQualityProductRequirements", shape=box];
"Section(QualityRequirements)" -> "Section(QualityProductRequirements)" [label=has];
"Section(QualityGoalRequirements)" [label="Section\nQualityGoalRequirements", shape=box];
"Goal(QGo1)" [label="Goal\nQGo1", shape=box];
"Section(QualityGoalRequirements)" -> "Goal(QGo1)" [label=has];
"Section(QualityGoalRequirements)" [label="Section\nQualityGoalRequirements", shape=box];
"Goal(QGo2)" [label="Goal\nQGo2", shape=box];
"Section(QualityGoalRequirements)" -> "Goal(QGo2)" [label=has];
"Goal(QGo1)" [label="Goal\nQGo1", shape=box];
"Spec(The system must strive for maximal safety)" [label="Spec\nThe system must strive for maximal safety", shape=box, style=rounded];
"Goal(QGo1)" -> "Spec(The system must strive for maximal safety)" [label=has];
"Goal(QGo2)" [label="Goal\nQGo2", shape=box];
"Spec(The system response time must be lower than 100 ms)" [label="Spec\nThe system response time must be lower than 100 ms", shape=box, style=rounded];
"Goal(QGo2)" -> "Spec(The system response time must be lower than 100 ms)" [label=has];
"Section(QualityDomainRequirements)" [label="Section\nQualityDomainRequirements", shape=box];
"Domain(QDo1)" [label="Domain\nQDo1", shape=box];
"Section(QualityDomainRequirements)" -> "Domain(QDo1)" [label=has];
"Domain(QDo1)" [label="Domain\nQDo1", shape=box];
"Spec(The system is able to drive until the next connecting road without a GPS-signal)" [label="Spec\nThe system is able to drive until the next connecting road without a GPS-signal", shape=box, style=rounded];
"Domain(QDo1)" -> "Spec(The system is able to drive until the next connecting road without a GPS-signal)" [label=has];
"Section(QualityProductRequirements)" [label="Section\nQualityProductRequirements", shape=box];
"Product(QPr1)" [label="Product\nQPr1", shape=box];
"Section(QualityProductRequirements)" -> "Product(QPr1)" [label=has];
"Section(QualityProductRequirements)" [label="Section\nQualityProductRequirements", shape=box];
"Product(QPr2)" [label="Product\nQPr2", shape=box];
"Section(QualityProductRequirements)" -> "Product(QPr2)" [label=has];
"Section(QualityProductRequirements)" [label="Section\nQualityProductRequirements", shape=box];
"Product(QPr3)" [label="Product\nQPr3", shape=box];
"Section(QualityProductRequirements)" -> "Product(QPr3)" [label=has];
"Section(QualityProductRequirements)" [label="Section\nQualityProductRequirements", shape=box];
"Product(QPr4)" [label="Product\nQPr4", shape=box];
"Section(QualityProductRequirements)" -> "Product(QPr4)" [label=has];
"Product(QPr1)" [label="Product\nQPr1", shape=box];
"Spec(The system must query for new traffic laws/regulations at least once a day)" [label="Spec\nThe system must query for new traffic laws/regulations at least once a day", shape=box, style=rounded];
"Product(QPr1)" -> "Spec(The system must query for new traffic laws/regulations at least once a day)" [label=has];
"Product(QPr2)" [label="Product\nQPr2", shape=box];
"Spec(The system must query for new car inspection rules/regulations online at least once a day)" [label="Spec\nThe system must query for new car inspection rules/regulations online at least once a day", shape=box, style=rounded];
"Product(QPr2)" -> "Spec(The system must query for new car inspection rules/regulations online at least once a day)" [label=has];
"Product(QPr3)" [label="Product\nQPr3", shape=box];
"Spec(System updates must only be performed when the car is parked)" [label="Spec\nSystem updates must only be performed when the car is parked", shape=box, style=rounded];
"Product(QPr3)" -> "Spec(System updates must only be performed when the car is parked)" [label=has];
"Product(QPr4)" [label="Product\nQPr4", shape=box];
"Spec(Traffic and weather data must be fetched every minute when an Internet connection is available)" [label="Spec\nTraffic and weather data must be fetched every minute when an Internet connection is available", shape=box, style=rounded];
"Product(QPr4)" -> "Spec(Traffic and weather data must be fetched every minute when an Internet connection is available)" [label=has];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Product(DPr1)" -> "Domain(FDo1)" [label=precedes];
"Domain(FDo4)" [label="Domain\nFDo4", shape=box];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Domain(FDo4)" -> "Domain(FDo1)" [label=precedes];
"Domain(FDo7)" [label="Domain\nFDo7", shape=box];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Domain(FDo7)" -> "Domain(FDo1)" [label=precedes];
"Domain(FDo7)" [label="Domain\nFDo7", shape=box];
"Domain(FDo12)" [label="Domain\nFDo12", shape=box];
"Domain(FDo7)" -> "Domain(FDo12)" [label=precedes];
"Domain(DDo1)" [label="Domain\nDDo1", shape=box];
"Domain(FDo15)" [label="Domain\nFDo15", shape=box];
"Domain(DDo1)" -> "Domain(FDo15)" [label=precedes];
"Product(FPr1)" [label="Product\nFPr1", shape=box];
"Product(FPr2)" [label="Product\nFPr2", shape=box];
"Product(FPr1)" -> "Product(FPr2)" [label=precedes];
"Product(FPr5)" [label="Product\nFPr5", shape=box];
"Product(FPr6)" [label="Product\nFPr6", shape=box];
"Product(FPr5)" -> "Product(FPr6)" [label=precedes];
"Domain(FDo10)" [label="Domain\nFDo10", shape=box];
"Product(FPr9)" [label="Product\nFPr9", shape=box];
"Domain(FDo10)" -> "Product(FPr9)" [label=precedes];
"Product(DPr6)" [label="Product\nDPr6", shape=box];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Product(DPr6)" -> "Product(FPr11)" [label=precedes];
"Domain(DDo3)" [label="Domain\nDDo3", shape=box];
"Domain(DDo4)" [label="Domain\nDDo4", shape=box];
"Domain(DDo3)" -> "Domain(DDo4)" [label=precedes];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Product(FPr1)" [label="Product\nFPr1", shape=box];
"Domain(FDo6)" -> "Product(FPr1)" [label=precedes];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Product(FPr3)" [label="Product\nFPr3", shape=box];
"Domain(FDo6)" -> "Product(FPr3)" [label=precedes];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Product(QPr1)" [label="Product\nQPr1", shape=box];
"Domain(FDo6)" -> "Product(QPr1)" [label=precedes];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Product(QPr2)" [label="Product\nQPr2", shape=box];
"Domain(FDo6)" -> "Product(QPr2)" [label=precedes];
"Domain(FDo6)" [label="Domain\nFDo6", shape=box];
"Product(QPr4)" [label="Product\nQPr4", shape=box];
"Domain(FDo6)" -> "Product(QPr4)" [label=precedes];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Product(FPr8)" [label="Product\nFPr8", shape=box];
"Domain(FDo1)" -> "Product(FPr8)" [label=precedes];
"Domain(FDo8)" [label="Domain\nFDo8", shape=box];
"Product(FPr7)" [label="Product\nFPr7", shape=box];
"Domain(FDo8)" -> "Product(FPr7)" [label=precedes];
"Domain(FDo8)" [label="Domain\nFDo8", shape=box];
"Product(FPr8)" [label="Product\nFPr8", shape=box];
"Domain(FDo8)" -> "Product(FPr8)" [label=precedes];
"Product(Dpr2)" [label="Product\nDpr2", shape=box];
"Product(DPr7)" [label="Product\nDPr7", shape=box];
"Product(Dpr2)" -> "Product(DPr7)" [label=precedes];
"Product(Dpr2)" [label="Product\nDpr2", shape=box];
"Domain(DDo3)" [label="Domain\nDDo3", shape=box];
"Product(Dpr2)" -> "Domain(DDo3)" [label=precedes];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Product(FPr2)" [label="Product\nFPr2", shape=box];
"Product(DPr3)" -> "Product(FPr2)" [label=precedes];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Domain(DDo2)" [label="Domain\nDDo2", shape=box];
"Product(DPr3)" -> "Domain(DDo2)" [label=precedes];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Domain(DDo3)" [label="Domain\nDDo3", shape=box];
"Product(DPr3)" -> "Domain(DDo3)" [label=precedes];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Domain(FDo2)" [label="Domain\nFDo2", shape=box];
"Domain(FDo5)" -> "Domain(FDo2)" [label=precedes];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Domain(FDo4)" [label="Domain\nFDo4", shape=box];
"Domain(FDo5)" -> "Domain(FDo4)" [label=precedes];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Domain(QDo1)" [label="Domain\nQDo1", shape=box];
"Domain(FDo5)" -> "Domain(QDo1)" [label=precedes];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Product(QPr3)" [label="Product\nQPr3", shape=box];
"Domain(FDo5)" -> "Product(QPr3)" [label=precedes];
"Domain(FDo5)" [label="Domain\nFDo5", shape=box];
"Product(FPr12)" [label="Product\nFPr12", shape=box];
"Domain(FDo5)" -> "Product(FPr12)" [label=precedes];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Domain(FDo1)" [label="Domain\nFDo1", shape=box];
"Product(FPr11)" -> "Domain(FDo1)" [label=precedes];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Domain(FDo3)" [label="Domain\nFDo3", shape=box];
"Product(FPr11)" -> "Domain(FDo3)" [label=precedes];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Product(FPr12)" [label="Product\nFPr12", shape=box];
"Product(FPr11)" -> "Product(FPr12)" [label=precedes];

}
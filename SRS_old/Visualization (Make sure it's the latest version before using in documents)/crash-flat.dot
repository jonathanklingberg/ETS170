digraph "reqT.Model" { 

  compound=true;overlap=false;rankdir=LR;clusterrank=local;
  node [fontname="Sans", fontsize=9];
  edge [fontname="Sans", fontsize=9];

"Title(CRASH)" [label="Title\nCRASH", shape=box, style=rounded];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go1)" [label="Goal\nGo1", shape=box];
"Section(Goal requirements)" -> "Goal(Go1)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go2)" [label="Goal\nGo2", shape=box];
"Section(Goal requirements)" -> "Goal(Go2)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go3)" [label="Goal\nGo3", shape=box];
"Section(Goal requirements)" -> "Goal(Go3)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go4)" [label="Goal\nGo4", shape=box];
"Section(Goal requirements)" -> "Goal(Go4)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go5)" [label="Goal\nGo5", shape=box];
"Section(Goal requirements)" -> "Goal(Go5)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go6)" [label="Goal\nGo6", shape=box];
"Section(Goal requirements)" -> "Goal(Go6)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go7)" [label="Goal\nGo7", shape=box];
"Section(Goal requirements)" -> "Goal(Go7)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go8)" [label="Goal\nGo8", shape=box];
"Section(Goal requirements)" -> "Goal(Go8)" [label=has];
"Section(Goal requirements)" [label="Section\nGoal requirements", shape=box];
"Goal(Go9)" [label="Goal\nGo9", shape=box];
"Section(Goal requirements)" -> "Goal(Go9)" [label=has];
"Goal(Go1)" [label="Goal\nGo1", shape=box];
"Spec(Autonomous car for Swedish traffic)" [label="Spec\nAutonomous car for Swedish traffic", shape=box, style=rounded];
"Goal(Go1)" -> "Spec(Autonomous car for Swedish traffic)" [label=has];
"Goal(Go2)" [label="Goal\nGo2", shape=box];
"Spec(Reduce amount of traffic accidents on Swedish roads)" [label="Spec\nReduce amount of traffic accidents on Swedish roads", shape=box, style=rounded];
"Goal(Go2)" -> "Spec(Reduce amount of traffic accidents on Swedish roads)" [label=has];
"Goal(Go3)" [label="Goal\nGo3", shape=box];
"Spec(Maintain industry market shares)" [label="Spec\nMaintain industry market shares", shape=box, style=rounded];
"Goal(Go3)" -> "Spec(Maintain industry market shares)" [label=has];
"Goal(Go4)" [label="Goal\nGo4", shape=box];
"Spec(Achieve maximal usability)" [label="Spec\nAchieve maximal usability", shape=box, style=rounded];
"Goal(Go4)" -> "Spec(Achieve maximal usability)" [label=has];
"Goal(Go5)" [label="Goal\nGo5", shape=box];
"Spec(Avoid human deaths in traffic)" [label="Spec\nAvoid human deaths in traffic", shape=box, style=rounded];
"Goal(Go5)" -> "Spec(Avoid human deaths in traffic)" [label=has];
"Goal(Go6)" [label="Goal\nGo6", shape=box];
"Spec(Achieve maximal security)" [label="Spec\nAchieve maximal security", shape=box, style=rounded];
"Goal(Go6)" -> "Spec(Achieve maximal security)" [label=has];
"Goal(Go7)" [label="Goal\nGo7", shape=box];
"Spec(Expand to other markets than private use)" [label="Spec\nExpand to other markets than private use", shape=box, style=rounded];
"Goal(Go7)" -> "Spec(Expand to other markets than private use)" [label=has];
"Goal(Go8)" [label="Goal\nGo8", shape=box];
"Spec(Achieve maximum comfort)" [label="Spec\nAchieve maximum comfort", shape=box, style=rounded];
"Goal(Go8)" -> "Spec(Achieve maximum comfort)" [label=has];
"Goal(Go9)" [label="Goal\nGo9", shape=box];
"Spec(Reduce cars' negative impacts on the environment)" [label="Spec\nReduce cars' negative impacts on the environment", shape=box, style=rounded];
"Goal(Go9)" -> "Spec(Reduce cars' negative impacts on the environment)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do1)" [label="Domain\nDo1", shape=box];
"Section(Domain requirements)" -> "Domain(Do1)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do2)" [label="Domain\nDo2", shape=box];
"Section(Domain requirements)" -> "Domain(Do2)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do3)" [label="Domain\nDo3", shape=box];
"Section(Domain requirements)" -> "Domain(Do3)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do4)" [label="Domain\nDo4", shape=box];
"Section(Domain requirements)" -> "Domain(Do4)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do5)" [label="Domain\nDo5", shape=box];
"Section(Domain requirements)" -> "Domain(Do5)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do6)" [label="Domain\nDo6", shape=box];
"Section(Domain requirements)" -> "Domain(Do6)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do7)" [label="Domain\nDo7", shape=box];
"Section(Domain requirements)" -> "Domain(Do7)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do8)" [label="Domain\nDo8", shape=box];
"Section(Domain requirements)" -> "Domain(Do8)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do9)" [label="Domain\nDo9", shape=box];
"Section(Domain requirements)" -> "Domain(Do9)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do10)" [label="Domain\nDo10", shape=box];
"Section(Domain requirements)" -> "Domain(Do10)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do11)" [label="Domain\nDo11", shape=box];
"Section(Domain requirements)" -> "Domain(Do11)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do12)" [label="Domain\nDo12", shape=box];
"Section(Domain requirements)" -> "Domain(Do12)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do13)" [label="Domain\nDo13", shape=box];
"Section(Domain requirements)" -> "Domain(Do13)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do14)" [label="Domain\nDo14", shape=box];
"Section(Domain requirements)" -> "Domain(Do14)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do15)" [label="Domain\nDo15", shape=box];
"Section(Domain requirements)" -> "Domain(Do15)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do16)" [label="Domain\nDo16", shape=box];
"Section(Domain requirements)" -> "Domain(Do16)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do17)" [label="Domain\nDo17", shape=box];
"Section(Domain requirements)" -> "Domain(Do17)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do18)" [label="Domain\nDo18", shape=box];
"Section(Domain requirements)" -> "Domain(Do18)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do19)" [label="Domain\nDo19", shape=box];
"Section(Domain requirements)" -> "Domain(Do19)" [label=has];
"Section(Domain requirements)" [label="Section\nDomain requirements", shape=box];
"Domain(Do20)" [label="Domain\nDo20", shape=box];
"Section(Domain requirements)" -> "Domain(Do20)" [label=has];
"Domain(Do1)" [label="Domain\nDo1", shape=box];
"Spec(The system must adhere to Swedish traffic laws as long as an accident is not imminent)" [label="Spec\nThe system must adhere to Swedish traffic laws as long as an accident is not imminent", shape=box, style=rounded];
"Domain(Do1)" -> "Spec(The system must adhere to Swedish traffic laws as long as an accident is not imminent)" [label=has];
"Domain(Do2)" [label="Domain\nDo2", shape=box];
"Spec(If an accident can be avoided, the system may break traffic laws)" [label="Spec\nIf an accident can be avoided, the system may break traffic laws", shape=box, style=rounded];
"Domain(Do2)" -> "Spec(If an accident can be avoided, the system may break traffic laws)" [label=has];
"Domain(Do3)" [label="Domain\nDo3", shape=box];
"Spec(When the car is in an unsafe state the car must not be able/allowed to drive in automatic mode)" [label="Spec\nWhen the car is in an unsafe state the car must not be able/allowed to drive in automatic mode", shape=box, style=rounded];
"Domain(Do3)" -> "Spec(When the car is in an unsafe state the car must not be able/allowed to drive in automatic mode)" [label=has];
"Domain(Do4)" [label="Domain\nDo4", shape=box];
"Spec(In the situation of an accident, the system must prioritize risks in the following order:)" [label="Spec\nIn the situation of an accident, the system must prioritize risks in the following order:", shape=box, style=rounded];
"Domain(Do4)" -> "Spec(In the situation of an accident, the system must prioritize risks in the following order:)" [label=has];
"Domain(Do4)" [label="Domain\nDo4", shape=box];
"Domain(Do4a)" [label="Domain\nDo4a", shape=box];
"Domain(Do4)" -> "Domain(Do4a)" [label=has];
"Domain(Do4)" [label="Domain\nDo4", shape=box];
"Domain(Do4b)" [label="Domain\nDo4b", shape=box];
"Domain(Do4)" -> "Domain(Do4b)" [label=has];
"Domain(Do4a)" [label="Domain\nDo4a", shape=box];
"Spec(Saving as many human lives as possible has top priority)" [label="Spec\nSaving as many human lives as possible has top priority", shape=box, style=rounded];
"Domain(Do4a)" -> "Spec(Saving as many human lives as possible has top priority)" [label=has];
"Domain(Do4b)" [label="Domain\nDo4b", shape=box];
"Spec(Protecting humans inside the car is prioritized over humans outside the car)" [label="Spec\nProtecting humans inside the car is prioritized over humans outside the car", shape=box, style=rounded];
"Domain(Do4b)" -> "Spec(Protecting humans inside the car is prioritized over humans outside the car)" [label=has];
"Domain(Do5)" [label="Domain\nDo5", shape=box];
"Spec(The system requires sensors for monitoring the road and surroundings)" [label="Spec\nThe system requires sensors for monitoring the road and surroundings", shape=box, style=rounded];
"Domain(Do5)" -> "Spec(The system requires sensors for monitoring the road and surroundings)" [label=has];
"Domain(Do6)" [label="Domain\nDo6", shape=box];
"Spec(The system requires a network connection)" [label="Spec\nThe system requires a network connection", shape=box, style=rounded];
"Domain(Do6)" -> "Spec(The system requires a network connection)" [label=has];
"Domain(Do7)" [label="Domain\nDo7", shape=box];
"Spec(The system requires a positioning instrument)" [label="Spec\nThe system requires a positioning instrument", shape=box, style=rounded];
"Domain(Do7)" -> "Spec(The system requires a positioning instrument)" [label=has];
"Domain(Do8)" [label="Domain\nDo8", shape=box];
"Spec(The system requires a intoxication measuring instrument)" [label="Spec\nThe system requires a intoxication measuring instrument", shape=box, style=rounded];
"Domain(Do8)" -> "Spec(The system requires a intoxication measuring instrument)" [label=has];
"Domain(Do9)" [label="Domain\nDo9", shape=box];
"Spec(The system requires an authentication sensor)" [label="Spec\nThe system requires an authentication sensor", shape=box, style=rounded];
"Domain(Do9)" -> "Spec(The system requires an authentication sensor)" [label=has];
"Domain(Do10)" [label="Domain\nDo10", shape=box];
"Spec(The system requires a voice input device)" [label="Spec\nThe system requires a voice input device", shape=box, style=rounded];
"Domain(Do10)" -> "Spec(The system requires a voice input device)" [label=has];
"Domain(Do11)" [label="Domain\nDo11", shape=box];
"Spec(The system functions without a GPS-signal once a route has been chosen)" [label="Spec\nThe system functions without a GPS-signal once a route has been chosen", shape=box, style=rounded];
"Domain(Do11)" -> "Spec(The system functions without a GPS-signal once a route has been chosen)" [label=has];
"Domain(Do12)" [label="Domain\nDo12", shape=box];
"Spec(The system needs a GPS-signal when starting on a new route)" [label="Spec\nThe system needs a GPS-signal when starting on a new route", shape=box, style=rounded];
"Domain(Do12)" -> "Spec(The system needs a GPS-signal when starting on a new route)" [label=has];
"Domain(Do13)" [label="Domain\nDo13", shape=box];
"Spec(The system must ecodrive when it is possible without risking safety)" [label="Spec\nThe system must ecodrive when it is possible without risking safety", shape=box, style=rounded];
"Domain(Do13)" -> "Spec(The system must ecodrive when it is possible without risking safety)" [label=has];
"Domain(Do14)" [label="Domain\nDo14", shape=box];
"Spec(All user interaction that is available in the system must be possible to enter remotely)" [label="Spec\nAll user interaction that is available in the system must be possible to enter remotely", shape=box, style=rounded];
"Domain(Do14)" -> "Spec(All user interaction that is available in the system must be possible to enter remotely)" [label=has];
"Domain(Do15)" [label="Domain\nDo15", shape=box];
"Spec(The system must support:)" [label="Spec\nThe system must support:", shape=box, style=rounded];
"Domain(Do15)" -> "Spec(The system must support:)" [label=has];
"Domain(Do15)" [label="Domain\nDo15", shape=box];
"Domain(Do15a)" [label="Domain\nDo15a", shape=box];
"Domain(Do15)" -> "Domain(Do15a)" [label=has];
"Domain(Do15)" [label="Domain\nDo15", shape=box];
"Domain(Do15b)" [label="Domain\nDo15b", shape=box];
"Domain(Do15)" -> "Domain(Do15b)" [label=has];
"Domain(Do15a)" [label="Domain\nDo15a", shape=box];
"Spec(Permanent user rights)" [label="Spec\nPermanent user rights", shape=box, style=rounded];
"Domain(Do15a)" -> "Spec(Permanent user rights)" [label=has];
"Domain(Do15b)" [label="Domain\nDo15b", shape=box];
"Spec(Temporary user rights)" [label="Spec\nTemporary user rights", shape=box, style=rounded];
"Domain(Do15b)" -> "Spec(Temporary user rights)" [label=has];
"Domain(Do16)" [label="Domain\nDo16", shape=box];
"Spec(The system must support the following authorized user types:)" [label="Spec\nThe system must support the following authorized user types:", shape=box, style=rounded];
"Domain(Do16)" -> "Spec(The system must support the following authorized user types:)" [label=has];
"Domain(Do16)" [label="Domain\nDo16", shape=box];
"Domain(Do16a)" [label="Domain\nDo16a", shape=box];
"Domain(Do16)" -> "Domain(Do16a)" [label=has];
"Domain(Do16)" [label="Domain\nDo16", shape=box];
"Domain(Do16b)" [label="Domain\nDo16b", shape=box];
"Domain(Do16)" -> "Domain(Do16b)" [label=has];
"Domain(Do16)" [label="Domain\nDo16", shape=box];
"Domain(Do16c)" [label="Domain\nDo16c", shape=box];
"Domain(Do16)" -> "Domain(Do16c)" [label=has];
"Domain(Do16)" [label="Domain\nDo16", shape=box];
"Domain(Do16d)" [label="Domain\nDo16d", shape=box];
"Domain(Do16)" -> "Domain(Do16d)" [label=has];
"Domain(Do16a)" [label="Domain\nDo16a", shape=box];
"Spec(Passenger)" [label="Spec\nPassenger", shape=box, style=rounded];
"Domain(Do16a)" -> "Spec(Passenger)" [label=has];
"Domain(Do16b)" [label="Domain\nDo16b", shape=box];
"Spec(Driver)" [label="Spec\nDriver", shape=box, style=rounded];
"Domain(Do16b)" -> "Spec(Driver)" [label=has];
"Domain(Do16c)" [label="Domain\nDo16c", shape=box];
"Spec(Owner)" [label="Spec\nOwner", shape=box, style=rounded];
"Domain(Do16c)" -> "Spec(Owner)" [label=has];
"Domain(Do16d)" [label="Domain\nDo16d", shape=box];
"Spec(Admin)" [label="Spec\nAdmin", shape=box, style=rounded];
"Domain(Do16d)" -> "Spec(Admin)" [label=has];
"Domain(Do17)" [label="Domain\nDo17", shape=box];
"Spec(A driver must be able to choose & change destination)" [label="Spec\nA driver must be able to choose & change destination", shape=box, style=rounded];
"Domain(Do17)" -> "Spec(A driver must be able to choose & change destination)" [label=has];
"Domain(Do18)" [label="Domain\nDo18", shape=box];
"Spec(An owner has the same rights as a driver and must also be able to handle users)" [label="Spec\nAn owner has the same rights as a driver and must also be able to handle users", shape=box, style=rounded];
"Domain(Do18)" -> "Spec(An owner has the same rights as a driver and must also be able to handle users)" [label=has];
"Domain(Do19)" [label="Domain\nDo19", shape=box];
"Spec(An admin must have the same rights as an owner and the admin must be able to change system settings)" [label="Spec\nAn admin must have the same rights as an owner and the admin must be able to change system settings", shape=box, style=rounded];
"Domain(Do19)" -> "Spec(An admin must have the same rights as an owner and the admin must be able to change system settings)" [label=has];
"Domain(Do20)" [label="Domain\nDo20", shape=box];
"Spec(The system must support the functionality in the context diagram in figure 1)" [label="Spec\nThe system must support the functionality in the context diagram in figure 1", shape=box, style=rounded];
"Domain(Do20)" -> "Spec(The system must support the functionality in the context diagram in figure 1)" [label=has];
"Section(Product requirements)" [label="Section\nProduct requirements", shape=box];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Section(Product requirements)" -> "Section(Functional product requirements)" [label=has];
"Section(Product requirements)" [label="Section\nProduct requirements", shape=box];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Section(Product requirements)" -> "Section(Data product requirements)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr1)" [label="Product\nFPr1", shape=box];
"Section(Functional product requirements)" -> "Product(FPr1)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr2)" [label="Product\nFPr2", shape=box];
"Section(Functional product requirements)" -> "Product(FPr2)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr3)" [label="Product\nFPr3", shape=box];
"Section(Functional product requirements)" -> "Product(FPr3)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr4)" [label="Product\nFPr4", shape=box];
"Section(Functional product requirements)" -> "Product(FPr4)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr5)" [label="Product\nFPr5", shape=box];
"Section(Functional product requirements)" -> "Product(FPr5)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr6)" [label="Product\nFPr6", shape=box];
"Section(Functional product requirements)" -> "Product(FPr6)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr7)" [label="Product\nFPr7", shape=box];
"Section(Functional product requirements)" -> "Product(FPr7)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr8)" [label="Product\nFPr8", shape=box];
"Section(Functional product requirements)" -> "Product(FPr8)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr9)" [label="Product\nFPr9", shape=box];
"Section(Functional product requirements)" -> "Product(FPr9)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr10)" [label="Product\nFPr10", shape=box];
"Section(Functional product requirements)" -> "Product(FPr10)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Section(Functional product requirements)" -> "Product(FPr11)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr12)" [label="Product\nFPr12", shape=box];
"Section(Functional product requirements)" -> "Product(FPr12)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr13)" [label="Product\nFPr13", shape=box];
"Section(Functional product requirements)" -> "Product(FPr13)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr14)" [label="Product\nFPr14", shape=box];
"Section(Functional product requirements)" -> "Product(FPr14)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr15)" [label="Product\nFPr15", shape=box];
"Section(Functional product requirements)" -> "Product(FPr15)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr16)" [label="Product\nFPr16", shape=box];
"Section(Functional product requirements)" -> "Product(FPr16)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr17)" [label="Product\nFPr17", shape=box];
"Section(Functional product requirements)" -> "Product(FPr17)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr18)" [label="Product\nFPr18", shape=box];
"Section(Functional product requirements)" -> "Product(FPr18)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr19)" [label="Product\nFPr19", shape=box];
"Section(Functional product requirements)" -> "Product(FPr19)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr20)" [label="Product\nFPr20", shape=box];
"Section(Functional product requirements)" -> "Product(FPr20)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr21)" [label="Product\nFPr21", shape=box];
"Section(Functional product requirements)" -> "Product(FPr21)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr22)" [label="Product\nFPr22", shape=box];
"Section(Functional product requirements)" -> "Product(FPr22)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr23)" [label="Product\nFPr23", shape=box];
"Section(Functional product requirements)" -> "Product(FPr23)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr24)" [label="Product\nFPr24", shape=box];
"Section(Functional product requirements)" -> "Product(FPr24)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr25)" [label="Product\nFPr25", shape=box];
"Section(Functional product requirements)" -> "Product(FPr25)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr26)" [label="Product\nFPr26", shape=box];
"Section(Functional product requirements)" -> "Product(FPr26)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr27)" [label="Product\nFPr27", shape=box];
"Section(Functional product requirements)" -> "Product(FPr27)" [label=has];
"Section(Functional product requirements)" [label="Section\nFunctional product requirements", shape=box];
"Product(FPr28)" [label="Product\nFPr28", shape=box];
"Section(Functional product requirements)" -> "Product(FPr28)" [label=has];
"Product(FPr1)" [label="Product\nFPr1", shape=box];
"Spec(The system has to to retrieve current and future weather data from the Internet when a connection is available)" [label="Spec\nThe system has to to retrieve current and future weather data from the Internet when a connection is available", shape=box, style=rounded];
"Product(FPr1)" -> "Spec(The system has to to retrieve current and future weather data from the Internet when a connection is available)" [label=has];
"Product(FPr2)" [label="Product\nFPr2", shape=box];
"Spec(The system must give a warning when dangerous weather conditions are predicted along the planned route)" [label="Spec\nThe system must give a warning when dangerous weather conditions are predicted along the planned route", shape=box, style=rounded];
"Product(FPr2)" -> "Spec(The system must give a warning when dangerous weather conditions are predicted along the planned route)" [label=has];
"Product(FPr3)" [label="Product\nFPr3", shape=box];
"Spec(The system has to retrieve data of current and future traffic situations when an Internet connection is available)" [label="Spec\nThe system has to retrieve data of current and future traffic situations when an Internet connection is available", shape=box, style=rounded];
"Product(FPr3)" -> "Spec(The system has to retrieve data of current and future traffic situations when an Internet connection is available)" [label=has];
"Product(FPr4)" [label="Product\nFPr4", shape=box];
"Spec(The system must always be possible to stop via an emergency-break)" [label="Spec\nThe system must always be possible to stop via an emergency-break", shape=box, style=rounded];
"Product(FPr4)" -> "Spec(The system must always be possible to stop via an emergency-break)" [label=has];
"Product(FPr5)" [label="Product\nFPr5", shape=box];
"Spec(It must always be possible to request to turn off the autonomous system and drive the car manually)" [label="Spec\nIt must always be possible to request to turn off the autonomous system and drive the car manually", shape=box, style=rounded];
"Product(FPr5)" -> "Spec(It must always be possible to request to turn off the autonomous system and drive the car manually)" [label=has];
"Product(FPr6)" [label="Product\nFPr6", shape=box];
"Spec(When manual driving has been requested, the car has to be standing still before the autonomous system is turned off)" [label="Spec\nWhen manual driving has been requested, the car has to be standing still before the autonomous system is turned off", shape=box, style=rounded];
"Product(FPr6)" -> "Spec(When manual driving has been requested, the car has to be standing still before the autonomous system is turned off)" [label=has];
"Product(FPr7)" [label="Product\nFPr7", shape=box];
"Spec(For a passenger to be able to drive the car manually, the person must pass the intoxication test)" [label="Spec\nFor a passenger to be able to drive the car manually, the person must pass the intoxication test", shape=box, style=rounded];
"Product(FPr7)" -> "Spec(For a passenger to be able to drive the car manually, the person must pass the intoxication test)" [label=has];
"Product(FPr8)" [label="Product\nFPr8", shape=box];
"Spec(The intoxication test has to be configured according to Swedish traffic law)" [label="Spec\nThe intoxication test has to be configured according to Swedish traffic law", shape=box, style=rounded];
"Product(FPr8)" -> "Spec(The intoxication test has to be configured according to Swedish traffic law)" [label=has];
"Product(FPr9)" [label="Product\nFPr9", shape=box];
"Spec(The system has to support voice controlled input)" [label="Spec\nThe system has to support voice controlled input", shape=box, style=rounded];
"Product(FPr9)" -> "Spec(The system has to support voice controlled input)" [label=has];
"Product(FPr10)" [label="Product\nFPr10", shape=box];
"Spec(The system has to support input from the car's dashboard)" [label="Spec\nThe system has to support input from the car's dashboard", shape=box, style=rounded];
"Product(FPr10)" -> "Spec(The system has to support input from the car's dashboard)" [label=has];
"Product(FPr11)" [label="Product\nFPr11", shape=box];
"Spec(The system has to be able to evaluate the car's status compared to current Swedish car inspection rules before driving off)" [label="Spec\nThe system has to be able to evaluate the car's status compared to current Swedish car inspection rules before driving off", shape=box, style=rounded];
"Product(FPr11)" -> "Spec(The system has to be able to evaluate the car's status compared to current Swedish car inspection rules before driving off)" [label=has];
"Product(FPr12)" [label="Product\nFPr12", shape=box];
"Spec(The system has to order a towing service when it is in an unsafe state)" [label="Spec\nThe system has to order a towing service when it is in an unsafe state", shape=box, style=rounded];
"Product(FPr12)" -> "Spec(The system has to order a towing service when it is in an unsafe state)" [label=has];
"Product(FPr13)" [label="Product\nFPr13", shape=box];
"Spec(When the system is in manual driving mode, the system must still be active and avoid accidents the same way as in autonomous mode)" [label="Spec\nWhen the system is in manual driving mode, the system must still be active and avoid accidents the same way as in autonomous mode", shape=box, style=rounded];
"Product(FPr13)" -> "Spec(When the system is in manual driving mode, the system must still be active and avoid accidents the same way as in autonomous mode)" [label=has];
"Product(FPr14)" [label="Product\nFPr14", shape=box];
"Spec(When a command is entered feedback must be provided to the user)" [label="Spec\nWhen a command is entered feedback must be provided to the user", shape=box, style=rounded];
"Product(FPr14)" -> "Spec(When a command is entered feedback must be provided to the user)" [label=has];
"Product(FPr15)" [label="Product\nFPr15", shape=box];
"Spec(The car must evaluate the amount of fuel left in the tank)" [label="Spec\nThe car must evaluate the amount of fuel left in the tank", shape=box, style=rounded];
"Product(FPr15)" -> "Spec(The car must evaluate the amount of fuel left in the tank)" [label=has];
"Product(FPr16)" [label="Product\nFPr16", shape=box];
"Spec(When the fuel level in the car reaches the level where it cannot make it to the second nearest gas station along the route, the car must drive to the nearest gas station and reload with fuel)" [label="Spec\nWhen the fuel level in the car reaches the level where it cannot make it to the second nearest gas station along the route, the car must drive to the nearest gas station and reload with fuel", shape=box, style=rounded];
"Product(FPr16)" -> "Spec(When the fuel level in the car reaches the level where it cannot make it to the second nearest gas station along the route, the car must drive to the nearest gas station and reload with fuel)" [label=has];
"Product(FPr17)" [label="Product\nFPr17", shape=box];
"Spec(If the voice control system cannot interpret an incoming voice command, it must suggest to the user what it interpreted)" [label="Spec\nIf the voice control system cannot interpret an incoming voice command, it must suggest to the user what it interpreted", shape=box, style=rounded];
"Product(FPr17)" -> "Spec(If the voice control system cannot interpret an incoming voice command, it must suggest to the user what it interpreted)" [label=has];
"Product(FPr18)" [label="Product\nFPr18", shape=box];
"Spec(The system must be able to drive with its sensor when the GPS and maps don't align with the reality)" [label="Spec\nThe system must be able to drive with its sensor when the GPS and maps don't align with the reality", shape=box, style=rounded];
"Product(FPr18)" -> "Spec(The system must be able to drive with its sensor when the GPS and maps don't align with the reality)" [label=has];
"Product(FPr19)" [label="Product\nFPr19", shape=box];
"Spec(When the emergency break is activated the system must stop completely at the earliest possible place without risking an accident and stay still until a new command is provided by an authenticated user)" [label="Spec\nWhen the emergency break is activated the system must stop completely at the earliest possible place without risking an accident and stay still until a new command is provided by an authenticated user", shape=box, style=rounded];
"Product(FPr19)" -> "Spec(When the emergency break is activated the system must stop completely at the earliest possible place without risking an accident and stay still until a new command is provided by an authenticated user)" [label=has];
"Product(FPr20)" [label="Product\nFPr20", shape=box];
"Spec(Traffic surroundings must be analyzed and taken into account in the decision making process)" [label="Spec\nTraffic surroundings must be analyzed and taken into account in the decision making process", shape=box, style=rounded];
"Product(FPr20)" -> "Spec(Traffic surroundings must be analyzed and taken into account in the decision making process)" [label=has];
"Product(FPr21)" [label="Product\nFPr21", shape=box];
"Spec(Road irregularities must be analyzed to give the passengers a safe and comfortable ride)" [label="Spec\nRoad irregularities must be analyzed to give the passengers a safe and comfortable ride", shape=box, style=rounded];
"Product(FPr21)" -> "Spec(Road irregularities must be analyzed to give the passengers a safe and comfortable ride)" [label=has];
"Product(FPr22)" [label="Product\nFPr22", shape=box];
"Spec(To turn off the CRASH system the car must not be moving)" [label="Spec\nTo turn off the CRASH system the car must not be moving", shape=box, style=rounded];
"Product(FPr22)" -> "Spec(To turn off the CRASH system the car must not be moving)" [label=has];
"Product(FPr23)" [label="Product\nFPr23", shape=box];
"Spec(The positioning instrument must be used in the calculations for the route)" [label="Spec\nThe positioning instrument must be used in the calculations for the route", shape=box, style=rounded];
"Product(FPr23)" -> "Spec(The positioning instrument must be used in the calculations for the route)" [label=has];
"Product(FPr24)" [label="Product\nFPr24", shape=box];
"Spec(The positioning instrument must be used to remotely localize the car)" [label="Spec\nThe positioning instrument must be used to remotely localize the car", shape=box, style=rounded];
"Product(FPr24)" -> "Spec(The positioning instrument must be used to remotely localize the car)" [label=has];
"Product(FPr25)" [label="Product\nFPr25", shape=box];
"Spec(The authentication sensor must be used to authenticate the users)" [label="Spec\nThe authentication sensor must be used to authenticate the users", shape=box, style=rounded];
"Product(FPr25)" -> "Spec(The authentication sensor must be used to authenticate the users)" [label=has];
"Product(FPr26)" [label="Product\nFPr26", shape=box];
"Spec(The cars coordinates must be able to be pushed to a centralized server)" [label="Spec\nThe cars coordinates must be able to be pushed to a centralized server", shape=box, style=rounded];
"Product(FPr26)" -> "Spec(The cars coordinates must be able to be pushed to a centralized server)" [label=has];
"Product(FPr27)" [label="Product\nFPr27", shape=box];
"Spec(The system must be able to install stored future system updates at a given date)" [label="Spec\nThe system must be able to install stored future system updates at a given date", shape=box, style=rounded];
"Product(FPr27)" -> "Spec(The system must be able to install stored future system updates at a given date)" [label=has];
"Product(FPr28)" [label="Product\nFPr28", shape=box];
"Spec(The system is able to drive until the next connecting road without a GPS-signal)" [label="Spec\nThe system is able to drive until the next connecting road without a GPS-signal", shape=box, style=rounded];
"Product(FPr28)" -> "Spec(The system is able to drive until the next connecting road without a GPS-signal)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Section(Data product requirements)" -> "Product(DPr1)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr2)" [label="Product\nDPr2", shape=box];
"Section(Data product requirements)" -> "Product(DPr2)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Section(Data product requirements)" -> "Product(DPr3)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr4)" [label="Product\nDPr4", shape=box];
"Section(Data product requirements)" -> "Product(DPr4)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr5)" [label="Product\nDPr5", shape=box];
"Section(Data product requirements)" -> "Product(DPr5)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr6)" [label="Product\nDPr6", shape=box];
"Section(Data product requirements)" -> "Product(DPr6)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr7)" [label="Product\nDPr7", shape=box];
"Section(Data product requirements)" -> "Product(DPr7)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr8)" [label="Product\nDPr8", shape=box];
"Section(Data product requirements)" -> "Product(DPr8)" [label=has];
"Section(Data product requirements)" [label="Section\nData product requirements", shape=box];
"Product(DPr9)" [label="Product\nDPr9", shape=box];
"Section(Data product requirements)" -> "Product(DPr9)" [label=has];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Spec(The system must store the following user data:)" [label="Spec\nThe system must store the following user data:", shape=box, style=rounded];
"Product(DPr1)" -> "Spec(The system must store the following user data:)" [label=has];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Product(DPr1a)" [label="Product\nDPr1a", shape=box];
"Product(DPr1)" -> "Product(DPr1a)" [label=has];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Product(DPr1b)" [label="Product\nDPr1b", shape=box];
"Product(DPr1)" -> "Product(DPr1b)" [label=has];
"Product(DPr1)" [label="Product\nDPr1", shape=box];
"Product(DPr1c)" [label="Product\nDPr1c", shape=box];
"Product(DPr1)" -> "Product(DPr1c)" [label=has];
"Product(DPr1a)" [label="Product\nDPr1a", shape=box];
"Spec(Name)" [label="Spec\nName", shape=box, style=rounded];
"Product(DPr1a)" -> "Spec(Name)" [label=has];
"Product(DPr1b)" [label="Product\nDPr1b", shape=box];
"Spec(User type)" [label="Spec\nUser type", shape=box, style=rounded];
"Product(DPr1b)" -> "Spec(User type)" [label=has];
"Product(DPr1c)" [label="Product\nDPr1c", shape=box];
"Spec(Fingerprint)" [label="Spec\nFingerprint", shape=box, style=rounded];
"Product(DPr1c)" -> "Spec(Fingerprint)" [label=has];
"Product(DPr2)" [label="Product\nDPr2", shape=box];
"Spec(The system must store route data)" [label="Spec\nThe system must store route data", shape=box, style=rounded];
"Product(DPr2)" -> "Spec(The system must store route data)" [label=has];
"Product(DPr3)" [label="Product\nDPr3", shape=box];
"Spec(The system must store a service log)" [label="Spec\nThe system must store a service log", shape=box, style=rounded];
"Product(DPr3)" -> "Spec(The system must store a service log)" [label=has];
"Product(DPr4)" [label="Product\nDPr4", shape=box];
"Spec(The system must be able to store future system updates)" [label="Spec\nThe system must be able to store future system updates", shape=box, style=rounded];
"Product(DPr4)" -> "Spec(The system must be able to store future system updates)" [label=has];
"Product(DPr5)" [label="Product\nDPr5", shape=box];
"Spec(The database must store current Swedish car inspection rules and regulations)" [label="Spec\nThe database must store current Swedish car inspection rules and regulations", shape=box, style=rounded];
"Product(DPr5)" -> "Spec(The database must store current Swedish car inspection rules and regulations)" [label=has];
"Product(DPr6)" [label="Product\nDPr6", shape=box];
"Spec(If there are users in the car, at least one needs to be authenticated)" [label="Spec\nIf there are users in the car, at least one needs to be authenticated", shape=box, style=rounded];
"Product(DPr6)" -> "Spec(If there are users in the car, at least one needs to be authenticated)" [label=has];
"Product(DPr7)" [label="Product\nDPr7", shape=box];
"Spec(The service log must contain the following data: date, repair nr, service provider, mileage, description)" [label="Spec\nThe service log must contain the following data: date, repair nr, service provider, mileage, description", shape=box, style=rounded];
"Product(DPr7)" -> "Spec(The service log must contain the following data: date, repair nr, service provider, mileage, description)" [label=has];
"Product(DPr8)" [label="Product\nDPr8", shape=box];
"Spec(The database must store the service log-entries in the way described in figure 3)" [label="Spec\nThe database must store the service log-entries in the way described in figure 3", shape=box, style=rounded];
"Product(DPr8)" -> "Spec(The database must store the service log-entries in the way described in figure 3)" [label=has];
"Product(DPr9)" [label="Product\nDPr9", shape=box];
"Spec(The database must store the user-entries in the way described in figure 2)" [label="Spec\nThe database must store the user-entries in the way described in figure 2", shape=box, style=rounded];
"Product(DPr9)" -> "Spec(The database must store the user-entries in the way described in figure 2)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De1)" [label="Design\nDe1", shape=box];
"Section(Design requirements)" -> "Design(De1)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De2)" [label="Design\nDe2", shape=box];
"Section(Design requirements)" -> "Design(De2)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De3)" [label="Design\nDe3", shape=box];
"Section(Design requirements)" -> "Design(De3)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De4)" [label="Design\nDe4", shape=box];
"Section(Design requirements)" -> "Design(De4)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De5)" [label="Design\nDe5", shape=box];
"Section(Design requirements)" -> "Design(De5)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De6)" [label="Design\nDe6", shape=box];
"Section(Design requirements)" -> "Design(De6)" [label=has];
"Section(Design requirements)" [label="Section\nDesign requirements", shape=box];
"Design(De7)" [label="Design\nDe7", shape=box];
"Section(Design requirements)" -> "Design(De7)" [label=has];
"Design(De1)" [label="Design\nDe1", shape=box];
"Spec(The touch screen must have brightness settings)" [label="Spec\nThe touch screen must have brightness settings", shape=box, style=rounded];
"Design(De1)" -> "Spec(The touch screen must have brightness settings)" [label=has];
"Design(De2)" [label="Design\nDe2", shape=box];
"Spec(The touch screen must be easily readable)" [label="Spec\nThe touch screen must be easily readable", shape=box, style=rounded];
"Design(De2)" -> "Spec(The touch screen must be easily readable)" [label=has];
"Design(De3)" [label="Design\nDe3", shape=box];
"Spec(The emergency break function must be easily accessible from all seats in the car)" [label="Spec\nThe emergency break function must be easily accessible from all seats in the car", shape=box, style=rounded];
"Design(De3)" -> "Spec(The emergency break function must be easily accessible from all seats in the car)" [label=has];
"Design(De4)" [label="Design\nDe4", shape=box];
"Spec(The emergency break function must be easy to find)" [label="Spec\nThe emergency break function must be easy to find", shape=box, style=rounded];
"Design(De4)" -> "Spec(The emergency break function must be easy to find)" [label=has];
"Design(De5)" [label="Design\nDe5", shape=box];
"Spec(The emergency break function must be easy to press)" [label="Spec\nThe emergency break function must be easy to press", shape=box, style=rounded];
"Design(De5)" -> "Spec(The emergency break function must be easy to press)" [label=has];
"Design(De6)" [label="Design\nDe6", shape=box];
"Spec(The voice control system must be intuitive, resembling human communication)" [label="Spec\nThe voice control system must be intuitive, resembling human communication", shape=box, style=rounded];
"Design(De6)" -> "Spec(The voice control system must be intuitive, resembling human communication)" [label=has];
"Design(De7)" [label="Design\nDe7", shape=box];
"Spec(Changing to manual mode must be easy)" [label="Spec\nChanging to manual mode must be easy", shape=box, style=rounded];
"Design(De7)" -> "Spec(Changing to manual mode must be easy)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu1)" [label="Quality\nQu1", shape=box];
"Section(Quality requirements)" -> "Quality(Qu1)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu2)" [label="Quality\nQu2", shape=box];
"Section(Quality requirements)" -> "Quality(Qu2)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu3)" [label="Quality\nQu3", shape=box];
"Section(Quality requirements)" -> "Quality(Qu3)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu4)" [label="Quality\nQu4", shape=box];
"Section(Quality requirements)" -> "Quality(Qu4)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu5)" [label="Quality\nQu5", shape=box];
"Section(Quality requirements)" -> "Quality(Qu5)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu6)" [label="Quality\nQu6", shape=box];
"Section(Quality requirements)" -> "Quality(Qu6)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu7)" [label="Quality\nQu7", shape=box];
"Section(Quality requirements)" -> "Quality(Qu7)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu8)" [label="Quality\nQu8", shape=box];
"Section(Quality requirements)" -> "Quality(Qu8)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu9)" [label="Quality\nQu9", shape=box];
"Section(Quality requirements)" -> "Quality(Qu9)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu10)" [label="Quality\nQu10", shape=box];
"Section(Quality requirements)" -> "Quality(Qu10)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu11)" [label="Quality\nQu11", shape=box];
"Section(Quality requirements)" -> "Quality(Qu11)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu12)" [label="Quality\nQu12", shape=box];
"Section(Quality requirements)" -> "Quality(Qu12)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu13)" [label="Quality\nQu13", shape=box];
"Section(Quality requirements)" -> "Quality(Qu13)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu14)" [label="Quality\nQu14", shape=box];
"Section(Quality requirements)" -> "Quality(Qu14)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu15)" [label="Quality\nQu15", shape=box];
"Section(Quality requirements)" -> "Quality(Qu15)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu16)" [label="Quality\nQu16", shape=box];
"Section(Quality requirements)" -> "Quality(Qu16)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu17)" [label="Quality\nQu17", shape=box];
"Section(Quality requirements)" -> "Quality(Qu17)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu18)" [label="Quality\nQu18", shape=box];
"Section(Quality requirements)" -> "Quality(Qu18)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu19)" [label="Quality\nQu19", shape=box];
"Section(Quality requirements)" -> "Quality(Qu19)" [label=has];
"Section(Quality requirements)" [label="Section\nQuality requirements", shape=box];
"Quality(Qu20)" [label="Quality\nQu20", shape=box];
"Section(Quality requirements)" -> "Quality(Qu20)" [label=has];
"Quality(Qu1)" [label="Quality\nQu1", shape=box];
"Spec(The system must query for new system and database updates at least once a day)" [label="Spec\nThe system must query for new system and database updates at least once a day", shape=box, style=rounded];
"Quality(Qu1)" -> "Spec(The system must query for new system and database updates at least once a day)" [label=has];
"Quality(Qu2)" [label="Quality\nQu2", shape=box];
"Spec(The system must query for new car inspection rules/regulations online at least once a day)" [label="Spec\nThe system must query for new car inspection rules/regulations online at least once a day", shape=box, style=rounded];
"Quality(Qu2)" -> "Spec(The system must query for new car inspection rules/regulations online at least once a day)" [label=has];
"Quality(Qu3)" [label="Quality\nQu3", shape=box];
"Spec(System updates must only be performed when the car is parked)" [label="Spec\nSystem updates must only be performed when the car is parked", shape=box, style=rounded];
"Quality(Qu3)" -> "Spec(System updates must only be performed when the car is parked)" [label=has];
"Quality(Qu4)" [label="Quality\nQu4", shape=box];
"Spec(Traffic and weather data must be fetched every minute when an Internet connection is available)" [label="Spec\nTraffic and weather data must be fetched every minute when an Internet connection is available", shape=box, style=rounded];
"Quality(Qu4)" -> "Spec(Traffic and weather data must be fetched every minute when an Internet connection is available)" [label=has];
"Quality(Qu5)" [label="Quality\nQu5", shape=box];
"Spec(The car always needs to have fuel left in the tank to be able to drive to the nearest gas station when calculating the route the user has put in the system)" [label="Spec\nThe car always needs to have fuel left in the tank to be able to drive to the nearest gas station when calculating the route the user has put in the system", shape=box, style=rounded];
"Quality(Qu5)" -> "Spec(The car always needs to have fuel left in the tank to be able to drive to the nearest gas station when calculating the route the user has put in the system)" [label=has];
"Quality(Qu6)" [label="Quality\nQu6", shape=box];
"Spec(The system must respond to a potential accident before the accident is unavoidable)" [label="Spec\nThe system must respond to a potential accident before the accident is unavoidable", shape=box, style=rounded];
"Quality(Qu6)" -> "Spec(The system must respond to a potential accident before the accident is unavoidable)" [label=has];
"Quality(Qu7)" [label="Quality\nQu7", shape=box];
"Spec(The Internet connection must be fast enough to download the weather and traffic information within 1 minute)" [label="Spec\nThe Internet connection must be fast enough to download the weather and traffic information within 1 minute", shape=box, style=rounded];
"Quality(Qu7)" -> "Spec(The Internet connection must be fast enough to download the weather and traffic information within 1 minute)" [label=has];
"Quality(Qu8)" [label="Quality\nQu8", shape=box];
"Spec(When the emergency break is activated the system must start to process the request within 100 ms)" [label="Spec\nWhen the emergency break is activated the system must start to process the request within 100 ms", shape=box, style=rounded];
"Quality(Qu8)" -> "Spec(When the emergency break is activated the system must start to process the request within 100 ms)" [label=has];
"Quality(Qu9)" [label="Quality\nQu9", shape=box];
"Spec(The sensors that monitor the road and surroundings must have a margin of error less than 0.01 %)" [label="Spec\nThe sensors that monitor the road and surroundings must have a margin of error less than 0.01 %", shape=box, style=rounded];
"Quality(Qu9)" -> "Spec(The sensors that monitor the road and surroundings must have a margin of error less than 0.01 %)" [label=has];
"Quality(Qu10)" [label="Quality\nQu10", shape=box];
"Spec(Ecodriving must be performed according to the current definition by Sveriges Trafikskolors Riksförbund)" [label="Spec\nEcodriving must be performed according to the current definition by Sveriges Trafikskolors Riksförbund", shape=box, style=rounded];
"Quality(Qu10)" -> "Spec(Ecodriving must be performed according to the current definition by Sveriges Trafikskolors Riksförbund)" [label=has];
"Quality(Qu11)" [label="Quality\nQu11", shape=box];
"Spec(When a command is entered remotely, the system must send a confirmation to the user that sent the command)" [label="Spec\nWhen a command is entered remotely, the system must send a confirmation to the user that sent the command", shape=box, style=rounded];
"Quality(Qu11)" -> "Spec(When a command is entered remotely, the system must send a confirmation to the user that sent the command)" [label=has];
"Quality(Qu12)" [label="Quality\nQu12", shape=box];
"Spec(Any dangerous weather conditions must be notified when a route is selected, before a route is commenced)" [label="Spec\nAny dangerous weather conditions must be notified when a route is selected, before a route is commenced", shape=box, style=rounded];
"Quality(Qu12)" -> "Spec(Any dangerous weather conditions must be notified when a route is selected, before a route is commenced)" [label=has];
"Quality(Qu13)" [label="Quality\nQu13", shape=box];
"Spec(The service log must store data about date, service type, service provider, mileage and description from every service done on the car)" [label="Spec\nThe service log must store data about date, service type, service provider, mileage and description from every service done on the car", shape=box, style=rounded];
"Quality(Qu13)" -> "Spec(The service log must store data about date, service type, service provider, mileage and description from every service done on the car)" [label=has];
"Quality(Qu14)" [label="Quality\nQu14", shape=box];
"Spec(The margin of error for the voice control system must be lower than 1 %)" [label="Spec\nThe margin of error for the voice control system must be lower than 1 %", shape=box, style=rounded];
"Quality(Qu14)" -> "Spec(The margin of error for the voice control system must be lower than 1 %)" [label=has];
"Quality(Qu15)" [label="Quality\nQu15", shape=box];
"Spec(The GPS system must be precise to within 1 meter)" [label="Spec\nThe GPS system must be precise to within 1 meter", shape=box, style=rounded];
"Quality(Qu15)" -> "Spec(The GPS system must be precise to within 1 meter)" [label=has];
"Quality(Qu16)" [label="Quality\nQu16", shape=box];
"Spec(The system must query for updates to its maps once a day)" [label="Spec\nThe system must query for updates to its maps once a day", shape=box, style=rounded];
"Quality(Qu16)" -> "Spec(The system must query for updates to its maps once a day)" [label=has];
"Quality(Qu17)" [label="Quality\nQu17", shape=box];
"Spec(The maps must be precise, compared to the reality, to within 3 meters)" [label="Spec\nThe maps must be precise, compared to the reality, to within 3 meters", shape=box, style=rounded];
"Quality(Qu17)" -> "Spec(The maps must be precise, compared to the reality, to within 3 meters)" [label=has];
"Quality(Qu18)" [label="Quality\nQu18", shape=box];
"Spec(The dashboard control must be precise to within 0.5 mm from the touch point of the user)" [label="Spec\nThe dashboard control must be precise to within 0.5 mm from the touch point of the user", shape=box, style=rounded];
"Quality(Qu18)" -> "Spec(The dashboard control must be precise to within 0.5 mm from the touch point of the user)" [label=has];
"Quality(Qu19)" [label="Quality\nQu19", shape=box];
"Spec(The touch screen responsiveness must be instant)" [label="Spec\nThe touch screen responsiveness must be instant", shape=box, style=rounded];
"Quality(Qu19)" -> "Spec(The touch screen responsiveness must be instant)" [label=has];
"Quality(Qu20)" [label="Quality\nQu20", shape=box];
"Spec(The system response time must be lower than 100 ms)" [label="Spec\nThe system response time must be lower than 100 ms", shape=box, style=rounded];
"Quality(Qu20)" -> "Spec(The system response time must be lower than 100 ms)" [label=has];

}